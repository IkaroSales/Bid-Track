<?php
defined('BASEPATH') OR exit('No direct script access allowed');
require APPPATH.'libraries/REST_Controller.php';

class Ws extends REST_Controller {
	function __construct() {
		parent::__construct();

		$this->load->model('basic/Empresa_basic');
		$this->load->model('model/Empresa_model');

        $this->load->model('basic/Entrega_basic');
        $this->load->model('model/Entrega_model');

		$this->load->model('basic/Romaneio_basic');
        $this->load->model('model/Romaneio_model');

		$this->methods['romaneio_get']['limit'] = 500;
        $this->methods['entrega_get']['limit'] = 500;
		$this->methods['empresa_get']['limit'] = 500;
		$this->methods['empresa_post']['limit'] = 100;
		$this->methods['empresa_delete']['limit'] = 50;
	}

    public function empresa_get() {
        $empresas = new Empresa_basic();
        $empresas = $this->Empresa_model->listar();
        $id = $this->get('id');

        if($id === NULL) {
            if($empresas) {
                $this->response($empresas, REST_Controller::HTTP_OK);
            } else {
                $this->response([
                    'status' => FALSE,
                    'message' => 'Nenhuma empresa foi encontrado.'
                ], REST_Controller::HTTP_NOT_FOUND);
            }
        }

        $id = $this->uri->segment(4);

        if($id <= 0) {
            $this->response(NULL, REST_Controller::HTTP_BAD_REQUEST);
        }

        $empresa = new Empresa_basic();

        if(!empty($empresas)) {
            foreach($empresas as $key => $value) {
                if(isset($value->cod_empresa) && $value->cod_empresa === $id) {
                    $empresa = $value;
                }
            }
        }

        if(!empty($empresa)) {
            $this->set_response($empresa, REST_Controller::HTTP_OK);
        } else {
            $this->set_response([
                'status' => FALSE,
                'message' => 'Empresa não pôde ser encontrado.'
            ], REST_Controller::HTTP_NOT_FOUND);
        }
    }
    public function empresa_post() {
        // $this->some_model->update_user( ... );
        $message = [
            'id' => 100, // Automatically generated by the model
            'name' => $this->post('name'),
            'email' => $this->post('email'),
            'message' => 'Added a resource'
        ];

        $this->set_response($message, REST_Controller::HTTP_CREATED);
    }
    public function empresa_delete() {
        $id = (int) $this->get('id');

        if($id <= 0) {
            $this->response(NULL, REST_Controller::HTTP_BAD_REQUEST);
        }

        // $this->some_model->delete_something($id);
        $message = [
            'id' => $id,
            'message' => 'Excluído o recurso'
        ];

        $this->set_response($message, REST_Controller::HTTP_NO_CONTENT);
    }

    public function romaneio_get() {
        $romaneios = new Romaneio_basic();
        $romaneios = $this->Romaneio_model->listar();
        $id = $this->get('id');

        if($id === NULL) {
            if($romaneios) {
                $this->response($romaneios, REST_Controller::HTTP_OK);
            } else {
                $this->response([
                    'status' => FALSE,
                    'message' => 'Nenhum romaneio foi encontrado.'
                ], REST_Controller::HTTP_NOT_FOUND);
            }
        }

        $id = $this->uri->segment(4);

        if($id <= 0) {
            $this->response(NULL, REST_Controller::HTTP_BAD_REQUEST);
        }

        $romaneio = new Romaneio_basic();

        if(!empty($romaneios)) {
            foreach($romaneios as $key => $value) {
                if(isset($value->cod_romaneio) && $value->cod_romaneio === $id) {
                    $romaneio = $value;
                }
            }
        }

        if(!empty($romaneio)) {
            $this->set_response($romaneio, REST_Controller::HTTP_OK);
        } else {
            $this->set_response([
                'status' => FALSE,
                'message' => 'Romaneio não pôde ser encontrado.'
            ], REST_Controller::HTTP_NOT_FOUND);
        }
    }

    public function entrega_get() {
        $entregas = new Entrega_basic();
        $entregas = $this->Entrega_model->listar();
        $id = $this->get('id');

        if($id === NULL) {
            if($entregas) {
                $this->response($entregas, REST_Controller::HTTP_OK);
            } else {
                $this->response([
                    'status' => FALSE,
                    'message' => 'Nenhuma entrega foi encontrada.'
                ], REST_Controller::HTTP_NOT_FOUND);
            }
        }

        $id = $this->uri->segment(4);

        if($id <= 0) {
            $this->response(NULL, REST_Controller::HTTP_BAD_REQUEST);
        }

        $entrega = new entrega_basic();

        if(!empty($entregas)) {
            foreach($entregas as $key => $value) {
                if(isset($value->cod_entrega) && $value->cod_entrega === $id) {
                    $entrega = $value;
                }
            }
        }

        if(!empty($entrega)) {
            $this->set_response($entrega, REST_Controller::HTTP_OK);
        } else {
            $this->set_response([
                'status' => FALSE,
                'message' => 'Entrega não pôde ser encontrada.'
            ], REST_Controller::HTTP_NOT_FOUND);
        }
    }
}